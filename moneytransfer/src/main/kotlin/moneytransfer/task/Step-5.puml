@startuml

package "Host" <<Rectangle>> {
}

package "Common Domain Layer" <<Rectangle>> {
    class Phone <<Value Object>> {
        - number: String
    }
}

package "User Domain Layer" <<Rectangle>> {
    class SessionId <<Value Object>> { }
    class Session <<Entity>> {
        - id: SessionId
        - expireDate: Date
    }
    Session o-- SessionId

    interface SignInRepository {
        + signIn(phone: Phone, code: ConfirmCode): SessionId
        + getSessionId(): SessionId
    }
    SignInRepository ..> Phone : pass
    SignInRepository ..> SessionId : use

    class SignIn <<UserCase>> {
        - invoke(phone: Phone, code: ConfirmCode):  SessionId
    }
    SignIn o-- SignInRepository
}

package "User Presentation Layer" <<Rectangle>> {
}
"Host" ..> "User Presentation Layer"
"User Presentation Layer" o-- SignIn

package "Transfer Domain Layer" <<Rectangle>> {
    class Transfer <<Aggregate Root>>

    interface TransferRepository {
        + confirm(transfer: Transfer): Status
    }

    class ConfirmTransfer <<UseCase>> {
        + invoke(transfer: Transfer.Builder): Transfer
    }
    ConfirmTransfer o-- TransferRepository
    ConfirmTransfer ..> Transfer : use
}

package "Transfer Presentation Layer" <<Rectangle>> {
}
"Host" ..> "Transfer Presentation Layer"
"Transfer Presentation Layer" o-- ConfirmTransfer


@enduml